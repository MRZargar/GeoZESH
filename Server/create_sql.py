import sys,glob
import os
   
expected_dir = "/home/App/stations/migrations"                                   
for file_name_relative in glob.glob(expected_dir+"/000*.py",recursive=True): 
    file_name = os.path.basename(file_name_relative)
number_of_file = int(file_name[3]) + 1
first_part_name = "000" + str(number_of_file)
second_part_name = "_create_custom_index.py"
file_name_end = first_part_name + second_part_name
f = open(expected_dir + "/" + file_name_end,"w+")
sql_query = """
            CREATE OR REPLACE FUNCTION TG_CREATE_NEW_STATION_TABLE()
                RETURNS TRIGGER
                LANGUAGE PLPGSQL
                AS
                    $$
                        DECLARE
                            NEW_STATION_NAME VARCHAR(20) := 'STATION';
                        BEGIN
                            NEW_STATION_NAME := CONCAT(NEW_STATION_NAME, TO_CHAR(NEW.ID, 'FM999999999999999999'));

                            UPDATE stations_setup
                            SET TABLE_NAME = NEW_STATION_NAME
                            WHERE ID = NEW.ID;
                            
                            EXECUTE FORMAT
                            ('
                            CREATE TABLE %s
                            (
                            WEEK INTEGER NOT NULL,
                            T DOUBLE PRECISION NOT NULL,
                            A_X DOUBLE PRECISION NOT NULL,
                            A_Y DOUBLE PRECISION NOT NULL,
                            A_Z DOUBLE PRECISION NOT NULL,
                            TEMP DOUBLE PRECISION,
                            PRIMARY KEY(WEEK, T)
                            );
                            
                            CREATE INDEX INDEX_%s ON %s(WEEK, T);
                            ', NEW_STATION_NAME
                        , NEW_STATION_NAME
                        , NEW_STATION_NAME);
                            
                        RETURN NULL;
                        END;
                    $$;

                DROP TRIGGER IF EXISTS CREATE_NEW_STATION_TABLE on stations_setup;

                CREATE TRIGGER CREATE_NEW_STATION_TABLE
                AFTER INSERT
                    ON stations_setup
                FOR EACH ROW
            EXECUTE PROCEDURE TG_CREATE_NEW_STATION_TABLE();
            """
f.write(

'''# Generated by Django 3.0.3 on 2020-10-25 16:03

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('stations',\''''+file_name[:-3]+'''\'),
    ]

    operations = [
        migrations.RunSQL("""'''+sql_query+'''""")
    ]
''')

